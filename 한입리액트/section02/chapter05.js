/*
    [ 원시타입 ]

    값 자체로써 변수에 저장되고 복사
    
    원시타입은 불변값으로,
    값을 수정하더라도 메모리값을 수정하는 게 아니라,
    새로운 메모리에 값을 할당하고 변수가 가리키는 메모리값을
    변경하는 방식으로 작동

    number, string, boolean, undefined, null
 */

/*
    [ 객체타입 ]

    참조값을 통해 변수에 저장되고 복사
    
    객체타입은 가변값으로, 메모리 값을 수정하는 방식으로 동작
    객체를 새로운 변수에 대입한 뒤 
    대입한 객체의 속성만 수정하더라도 원본도 함께 수정
    
    Object > Array, Function, RegexExp
*/

// 1. 얕은복사와 깊은복사

// 얕은복사
// 객체의 참조값을 복사
// 원본 객체가 수정될 수 있어 위험
// o2.name을 수정하면 o1.name에도 수정내역이 반영
let o1 = { name: '권정훈' };
let o2 = o1;
console.log(o1 === o2); // true

// 깊은복사
// 새로운 객체를 생성하고 프로퍼티만 따로 복사
// 원본 객체가 수정될 일이 없어 안전함
let o3 = { name: '권정훈' };
let o4 = { ...o3 };

// 2. 얕은 비교와 깊은 비교

// 얕은 비교
// 참조값을 기준으로 비교
console.log(o3 === o4); // false

// 깊은 비교
// 객체를 문자열로 변환하여 비교
console.log(JSON.stringify(o3) === JSON.stringify(o4)); // true
